pipeline {
  /* no label, executor is determined by JJB */
  agent {
    label "${buildNode}"
  }
  // Set so that fossa will know where to run golang tools from
  environment {
    PATH = "$PATH:/usr/lib/go-1.12/bin:/usr/local/go/bin/:$WORKSPACE/go/bin"
    GOPATH = "$WORKSPACE/go"
  }
   options {
      timeout(15)
  }
  stages {
    stage ("Clean workspace") {
      steps {
        sh 'rm -rf *'
      }
    }
    stage('Git') {
        git 'https://github.com/jilu407/fossa-test.git'
    }
	stage('install') {
        sh ' npm install'
    }
	
    
  
    stage ("Run FOSSA") {
      steps {
        // catch any errors that occur so that logs can be saved in the next stage
        // docs: https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#catcherror-catch-error-and-set-build-result-to-failure
        catchError {
          withCredentials([string(credentialsId: 'fossa-api-key', variable: 'FOSSA_API_KEY')]) {
            sh returnStdout: true, script: """
              #!/usr/bin/env bash
              set -eu -o pipefail
              echo "Creating debug output directory"
              mkdir -p "$WORKSPACE/debug"
              echo "Download/install fossa CLI tool"
              curl -H 'Cache-Control: no-cache' -O https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh
              mkdir -p "$WORKSPACE/go/bin"
              bash install.sh -b "$WORKSPACE/go/bin"
              echo "Fossa version:"
              fossa -v
              echo "Testing project: $projectName located in $test_path"
              pushd "$test_path"
              echo "Run 'fossa init'"
              fossa init --no-ansi --verbose
              echo "Contents of .fossa.yml generated by 'fossa init':"
              cat .fossa.yml
              echo "Run 'fossa analyze'"
              fossa analyze --no-ansi --verbose \
                            -T "$fossaTeam" \
                            -t "$projectName" \
                            -L "$GERRIT_CHANGE_URL" \
                            -b "$git_tag_or_branch" \
                            -r "$GERRIT_CHANGE_NUMBER/$GERRIT_PATCHSET_NUMBER"
              echo "Get FOSSA test results with 'fossa test'"
              fossa test --no-ansi --verbose \
                            -T "$fossaTeam" \
                            -t "$projectName" \
                            -L "$GERRIT_CHANGE_URL" \
                            -b "$git_tag_or_branch" \
                            -r "$GERRIT_CHANGE_NUMBER/$GERRIT_PATCHSET_NUMBER"
              popd
            """
          }
        }
      }
    }
    stage ("Save Logs") {
      steps {
        sh returnStdout: true, script: """
            echo "Logs:"
            ls -l $WORKSPACE/debug
          """
        archiveArtifacts artifacts:'debug/*.log'
      }
    }
  }
}
